@startuml
'https://plantuml.com/state-diagram

set namespaceSeparator ::

namespace speedEngine {
	class Exception {}
	class LoadSongError {
		+ LoadSongError(std::string &name, std::string &filepath)
	}

	Exception --> LoadSongError


	namespace AudioManager {
		interface StreamFile {
			+ Stream(std::string &name, std::string &filepath);
			+ virtual void setup()
			+ virtual void setVolume()
			+ virtual void pause()
			+ virtual void play()
			+ virtual void reset()
		}

		abstract AstreamFile {
			+ AStream(std::string &name, std::string &filepath);
        	+ virtual void setup()
			+ virtual void setVolume()
			+ virtual void pause()
			+ virtual void play()
			+ virtual void reset()
			#std::string name;
			#std::string filepath;
		}

		class AudioFile {
			+ AudioFile(std::string &name, std::string &filepath);
			+ void setup()
			+ void setVolume()
			+ void pause()
			+ void play()
			+ void reset()

        	- _song : sf::Sound;
			- _songBuffer : sf::SoundBuffer;
		}

		class MusicFile {
        	+ MusicFile(std::string &name, std::string &filepath);
            + void setup()
            + virtual void setVolume()
            + virtual void pause()
            + virtual void play()
            + virtual void reset()

            - _song: sf::Music
		}

		class AudioManager {
			+ AudioManager()
			+ AudioManager(std::unordered_map<std::string &, AstreamFile &>)
			+ setSongs(std::unordered_map<std::string &, AstreamFile &>)

			+ addAudio(std::string &audId, AstreamFile &)
			+ addAudio(std::string &audId, std::string &filepath)
			+ removeAudio(std::string &audioId)
			+ bool setvolume(std::string &audioId, float vol);
			- std::unordered_map<std::string &, AstreamFile &> _songs;
			}
		StreamFile --> AstreamFile
		AstreamFile --> AudioFile
		AstreamFile --> MusicFile
	}

	namespace scene {

                class SceneManager {
                			+ SceneManager() = default;

                			+ ~SceneManager() = default;;

                			+ void addState(StateRef newState, bool isReplacing = true);

                			+ void RemoveState();

                			+ void ProcessStateChanges();

                			+ StateRef &GetActiveState();

                			- std::stack<StateRef> _scenes;
                			- StateRef _newState;
                			- bool _isRemoving;
                			- bool _isAdding;
                			- bool _isReplacing;
                }

				interface Scene {
        			+ virtual void Init()

        			+ virtual void HandleInput();

        			+ virtual void Update(float dt);

        			+ virtual void Draw(float dt);

        			+ virtual void Pause();

        			+ virtual void Resume();
        		}

        		class Intro {
					+ virtual void Init()

        			+ virtual void HandleInput();

        			+ virtual void Update(float dt);

        			+ virtual void Draw(float dt);

        			+ virtual void Pause();

        			+ virtual void Resume();
					- AudioManager &_songs;

        		}

        		class Menu {
        			+ virtual void Init()

                    + virtual void HandleInput();

                    + virtual void Update(float dt);

                    + virtual void Draw(float dt);

                    + virtual void Pause();

                    + virtual void Resume();

                    - AudioManager &_songs;
        		}

				Scene --> Intro
				Scene --> Menu
	}
}
@enduml